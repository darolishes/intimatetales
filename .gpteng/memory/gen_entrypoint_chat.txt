```
 import React, { useState, useEffect } from 'react';
import Chat from './components/Chat';
import './App.css';
import { IoClose, IoAddCircleOutline, IoImage, IoTrashBin, IoReader, IoReceipt, IoPersonAdd, beta } from "react-icons/io5";
import toast, { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

function App() {
  const npcExemple = "IntimateTales is a little AI. He is kawaii and love help everyone.";
  const [clickCount, setClickCount] = useState(0);
  const [imageUrl, setImageUrl] = useState('impai.png');
  const [isSettingsMenuOpen, setIsSettingsMenuOpen] = useState(false);
  const [isNPCMenuOpen, setIsNPCMenuOpen] = useState(false);
  const [message, setMessage] = useState('');
  const [chatHistory, setChatHistory] = useState([]);
  const [width, setWidth] = useState(
    localStorage.getItem('width') ? Number(localStorage.getItem('width')) : 1024);
  const [height, setHeight] = useState(
    localStorage.getItem('height') ? Number(localStorage.getItem('height')) : 512);
  const [steps, setSteps] = useState(
    localStorage.getItem('steps') ? Number(localStorage.getItem('steps')) : 1);
  const [npcList, setNpcList] = useState([]);
  const [npcAvatarList, setNpcAvatarList] = useState([]);

  const defaultFirstPrompt = `[INST] You are a game master of a role play. \
You need to act as a narrator for simulate the beginning of the story. \
Just describe the situation and dont speak for the player. \
This is the story theme: [MESSAGE], write the beginning of \
the story using this information. [/INST]`;

  const [firstUserPrompt, setFirstUserPrompt] = useState(
    localStorage.getItem('firstPrompt') ? localStorage.getItem('firstPrompt') : defaultFirstPrompt);
  const [firstPrompt, setFirstPrompt] = useState(firstUserPrompt
    .replace('[MESSAGE]', message));

  const [userPrompt, setUserPrompt] = useState(
    localStorage.getItem('prompt') ? localStorage.getItem('prompt') : defaultPrompt);
  const [prompt, setPrompt] = useState(userPrompt
    .replace('[CHAT_HISTORY]', JSON.stringify(chatHistory))
    .replace('[MESSAGE]', message));

  const toggleSettingsMenu = () => {
    setIsSettingsMenuOpen(!isSettingsMenuOpen);
    setIsNPCMenuOpen(false);
  };

  const toggleNPCMenu = () => {
    setIsNPCMenuOpen(!isNPCMenuOpen);
    setIsSettingsMenuOpen(false);
  };

  const handleClick = () => {
    setClickCount((prevClickCount) => prevClickCount + 1);

    if (clickCount === 9) {
      setImageUrl('angry_impai.png');
    }
  };

  const addNpc = () => {
    setNpcList((prevNpcList) => [
      ...prevNpcList, 
      npcExemple
    ]);
  }

  const editNpc = (index, newValue) => {
    setNpcList((prevNpcList) => {
      const updatedNpcList = [...prevNpcList];
      updatedNpcList[index] = newValue;
      return updatedNpcList;
    });
  };

  const deleteNpc = (index) => {
    setNpcList((prevNpcList) => {
      const updatedNpcList = [...prevNpcList];
      updatedNpcList.splice(index, 1);
      return updatedNpcList;
    });
  };

  useEffect(() => {
    const filteredChatHistory = chatHistory.filter((item) => item.sender !== "image");

    setPrompt(userPrompt
      .replace('[CHAT_HISTORY]', JSON.stringify(filteredChatHistory))
      .replace('[MESSAGE]', message));
  }, [userPrompt, chatHistory, message])

  useEffect(() => {
    setFirstPrompt(firstUserPrompt
      .replace('[MESSAGE]', message));
  }, [firstUserPrompt, message])

  return (
    <div>
      <img src={imageUrl} alt="IntimateTales" className="logo" onClick={handleClick} />
      <div className={`menu-settings ${isSettingsMenuOpen ? 'open' : ''}`}>
        <a onClick={toggleSettingsMenu}>
          {isSettingsMenuOpen ? <IoClose className="icon-settings" /> : <img src="worker_impai.png" alt="S" className="icon-impai-head" />}
        </a>
        <div>
          <textarea
            type="text"
            value={firstPrompt}
            onChange={(e) => setFirstPrompt(e.target.value)}
            placeholder={defaultFirstPrompt}
          />
          <br />
          <div className="align-items">
            <IoReader className="icon-user" />
            {localStorage.getItem('width') && localStorage.getItem('height') && localStorage.getItem('steps') ? (
              <button onClick={() => setFirstPrompt(defaultFirstPrompt)}>Reset Prompt</button>
            ) : null}
          </div>
          <br />
          <textarea
            type="text"
            value={userPrompt}
            onChange={(e) => setUserPrompt(e.target.value)}
            placeholder={defaultPrompt}
          />
          <br />
          <div className="align-items">
            <IoTrashBin className="icon-user" />
            {localStorage.getItem('width') && localStorage.getItem('height') && localStorage.getItem('steps') ? (
              <button onClick={() => setUserPrompt(defaultPrompt)}>Reset Prompt</button>
            ) : null}
          </div>
          <br />
          <div className="align-items">
            <IoAddCircleOutline className="icon-user" />
            Create Character
            <beta>BETA</beta>
          </div>
        </div>
      </div>
      <div className={`menu-npc ${isNPCMenuOpen ? 'open' : ''}`}>
        <a onClick={toggleNPCMenu}>
          {isNPCMenuOpen ? <IoClose className="icon-npc" /> : <img src="astro_impai.png" alt="C" className="icon-impai-head" />}
        </a>
        <div>
          {npcList.map((npc, index) => (
            <div style={{padding: "10px"}} key={index}>
              <textarea
                type="text"
                value={npc}
                onChange={(e) => editNpc(index, e.target.value)}
                placeholder={npcExemple}
              />
              <div className="align-items" style={{paddingLeft: "20px"}}>
                <div className="tooltip" data-tooltip="Generate Image">
                  <button onClick={() => generateImageNpc(index)}>
                    <IoImage />
                  </button>
                </div>
                <div className="tooltip" data-tooltip="Delete Character">
                  <button onClick={() => deleteNpc(index)}>
                    <IoTrashBin />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
      <Chat
        {...{
          firstPrompt,
          prompt,
          message,
          setMessage,
          chatHistory,
          setChatHistory,
          width,
          height,
          steps,
          npcList,
        }}
      />
    </div>
  );
}

export default App;
            ```